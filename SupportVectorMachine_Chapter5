#!/usr/bin/env python2
# -*- coding: utf-8 -*-
"""
Created on Mon Apr  2 13:38:53 2018

@author: soojunghong

@about : Support Vector Machine 
"""

import numpy as np
from sklearn import datasets
from sklearn.pipeline import Pipeline
from sklearn.preprocessing import StandardScaler
from sklearn.svm import LinearSVC

iris = datasets.load_iris()
iris
X = iris["data"][:,(2,3)] #petal length, petam width
y = (iris["target"] == 2).astype(np.float64) #iris-virginica

svm_clf = Pipeline([("scaler", StandardScaler()),
                    ("linear_svc", LinearSVC(C=1, loss="hinge")),])
svm_clf.fit(X,y)
svm_clf.predict([[5.5, 1.7]])

#--------------------------------------------------------------------------------------
# Adding features to make a dataset linearly separable
# To implement this idea, create a pipeline containing PolynomialFeatures transformer
#--------------------------------------------------------------------------------------
from sklearn.datasets import make_moons
from sklearn.pipeline import Pipeline
from sklearn.preprocessing import PolynomialFeatures

polynomial_svm_clf = Pipeline([
        ("poly_features", PolynomialFeatures(degree=3)),
        ("scaler", StandardScaler()),
        ("svm_clf", LinearSVC(C=10, loss="hinge"))
        ])

polynomial_svm_clf.fit(X,y)


#-------------------
# SVM using Kernel
#-------------------
from sklearn.svm import SVC
poly_kernel_svm_clf = Pipeline([
        ("scaler", StandardScaler()),
        ("svm_clf", SVC(kernel="poly", degree=3, coef0=1, C=5))
        ])
poly_kernel_svm_clf.fit(X,y)
